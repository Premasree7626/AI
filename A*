import heapq

def heuristic(a, b):
    # Manhattan distance
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def a_star(grid, start, goal):
    rows, cols = len(grid), len(grid[0])
    open_set = []
    heapq.heappush(open_set, (0 + heuristic(start, goal), 0, start, [start]))
    visited = set()

    directions = [(-1,0), (1,0), (0,-1), (0,1)]  # up, down, left, right

    while open_set:
        est_total_cost, cost_so_far, current, path = heapq.heappop(open_set)

        if current == goal:
            return path

        if current in visited:
            continue
        visited.add(current)

        for dx, dy in directions:
            nx, ny = current[0] + dx, current[1] + dy
            if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0:
                neighbor = (nx, ny)
                new_cost = cost_so_far + 1
                heapq.heappush(open_set, (new_cost + heuristic(neighbor, goal), new_cost, neighbor, path + [neighbor]))

    return None  # No path found

# Example grid: 0 = free cell, 1 = obstacle
grid = [
    [0, 0, 1, 0],
    [0, 1, 0, 0],
    [0, 0, 0, 1],
    [1, 0, 0, 0]
]

start = (0, 0)
goal = (3, 3)

path = a_star(grid, start, goal)
print("Path found:" if path else "No path found")
print(path)
