from collections import deque

def bfs(grid, start, goal):
    rows, cols = len(grid), len(grid[0])
    visited = [[False]*cols for _ in range(rows)]
    queue = deque()
    queue.append((start, [start]))

    directions = [(-1,0),(1,0),(0,-1),(0,1)]  # up, down, left, right

    while queue:
        (x, y), path = queue.popleft()

        if (x, y) == goal:
            return path

        for dx, dy in directions:
            nx, ny = x+dx, y+dy
            if 0 <= nx < rows and 0 <= ny < cols and not visited[nx][ny] and grid[nx][ny] == 0:
                visited[nx][ny] = True
                queue.append(((nx, ny), path + [(nx, ny)]))

    return None  # No path found

# Example grid: 0 = free, 1 = obstacle
grid = [
    [0, 0, 1, 0],
    [0, 1, 0, 0],
    [0, 0, 0, 1],
    [1, 0, 0, 0]
]

start = (0, 0)
goal = (3, 3)

path = bfs(grid, start, goal)
print("Path found:" if path else "No path found")
print(path)
