# Define the map and constraints
colors = ['Red', 'Green', 'Blue']

# Adjacency list (simplified map: Australia)
adjacent_regions = {
    'WA': ['NT', 'SA'],
    'NT': ['WA', 'SA', 'Q'],
    'SA': ['WA', 'NT', 'Q', 'NSW', 'V'],
    'Q': ['NT', 'SA', 'NSW'],
    'NSW': ['Q', 'SA', 'V'],
    'V': ['SA', 'NSW'],
    'T': []  # Tasmania has no neighbors
}

def is_valid(region, color, assignment):
    for neighbor in adjacent_regions[region]:
        if neighbor in assignment and assignment[neighbor] == color:
            return False
    return True

def backtrack(assignment):
    # If all regions are assigned, return solution
    if len(assignment) == len(adjacent_regions):
        return assignment

    # Select an unassigned region
    unassigned = [r for r in adjacent_regions if r not in assignment][0]

    for color in colors:
        if is_valid(unassigned, color, assignment):
            assignment[unassigned] = color
            result = backtrack(assignment)
            if result:
                return result
            del assignment[unassigned]  # Backtrack

    return None  # No valid assignment found

# Run the solver
solution = backtrack({})
print("Solution:" if solution else "No solution found")
print(solution)
